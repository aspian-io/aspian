// <auto-generated />
using System;
using Aspian.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Aspian.Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20201122143216_addThumnailPathToAttachment")]
    partial class addThumnailPathToAttachment
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Aspian.Domain.ActivityModel.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("SiteId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Aspian.Domain.AttachmentModel.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileExtension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("LinkAccessibility")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PublicFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelativePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ThumbnailPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UploadLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FileName")
                        .IsUnique()
                        .HasFilter("[FileName] IS NOT NULL");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("SiteId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Aspian.Domain.AttachmentModel.Attachmentmeta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MetaKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Attachmentmetas");
                });

            modelBuilder.Entity("Aspian.Domain.CommentModel.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ParentId");

                    b.HasIndex("PostId");

                    b.HasIndex("SiteId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Aspian.Domain.CommentModel.CommentHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UserId");

                    b.ToTable("CommentHistories");
                });

            modelBuilder.Entity("Aspian.Domain.CommentModel.Commentmeta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Commentmeta");
                });

            modelBuilder.Entity("Aspian.Domain.OptionModel.Option", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("Aspian.Domain.OptionModel.Optionmeta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultValueDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("OptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PublicKeyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OptionId");

                    b.ToTable("Optionmetas");
                });

            modelBuilder.Entity("Aspian.Domain.PostModel.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CommentAllowed")
                        .HasColumnType("bit");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Excerpt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PinOrder")
                        .HasColumnType("int");

                    b.Property<string>("PostStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ScheduledFor")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ParentId");

                    b.HasIndex("SiteId");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasFilter("[Slug] IS NOT NULL");

                    b.HasIndex("Title")
                        .IsUnique()
                        .HasFilter("[Title] IS NOT NULL");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Aspian.Domain.PostModel.PostAttachment", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostId", "AttachmentId");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("PostAttachments");
                });

            modelBuilder.Entity("Aspian.Domain.PostModel.Postmeta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MetaKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PostId");

                    b.ToTable("Postmetas");
                });

            modelBuilder.Entity("Aspian.Domain.ScheduleModel.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ScheduleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ScheduledFor")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ScheduledItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Aspian.Domain.SiteModel.Site", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Domain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DownloadHostActivatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DownloadHostAvailableSpace")
                        .HasColumnType("bigint");

                    b.Property<long?>("DownloadHostCapacity")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DownloadHostExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasDownloadHost")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MainHostActivatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("MainHostAvailableSpace")
                        .HasColumnType("bigint");

                    b.Property<long>("MainHostCapacity")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("MainHostExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ModuleActivatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModuleExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteType")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("SiteType")
                        .IsUnique();

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("Aspian.Domain.TaxonomyModel.Taxonomy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ParentId");

                    b.HasIndex("SiteId");

                    b.ToTable("Taxonomies");
                });

            modelBuilder.Entity("Aspian.Domain.TaxonomyModel.TaxonomyPost", b =>
                {
                    b.Property<Guid>("TaxonomyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaxonomyId", "PostId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PostId");

                    b.ToTable("TaxonomyPosts");
                });

            modelBuilder.Entity("Aspian.Domain.TaxonomyModel.Term", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("TaxonomyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasFilter("[Slug] IS NOT NULL");

                    b.HasIndex("TaxonomyId")
                        .IsUnique();

                    b.ToTable("Terms");
                });

            modelBuilder.Entity("Aspian.Domain.TaxonomyModel.Termmeta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("TermId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("TermId");

                    b.ToTable("Termmetas");
                });

            modelBuilder.Entity("Aspian.Domain.UserModel.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Aspian.Domain.UserModel.UserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("Aspian.Domain.UserModel.Usermeta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MetaKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Usermetas");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Aspian.Domain.ActivityModel.Activity", b =>
                {
                    b.HasOne("Aspian.Domain.UserModel.User", "CreatedBy")
                        .WithMany("Activities")
                        .HasForeignKey("CreatedById");

                    b.HasOne("Aspian.Domain.SiteModel.Site", "Site")
                        .WithMany("Activities")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Aspian.Domain.AttachmentModel.Attachment", b =>
                {
                    b.HasOne("Aspian.Domain.UserModel.User", "CreatedBy")
                        .WithMany("CreatedAttachments")
                        .HasForeignKey("CreatedById");

                    b.HasOne("Aspian.Domain.UserModel.User", "ModifiedBy")
                        .WithMany("ModifiedAttachments")
                        .HasForeignKey("ModifiedById");

                    b.HasOne("Aspian.Domain.SiteModel.Site", "Site")
                        .WithMany("Attachments")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Aspian.Domain.AttachmentModel.Attachmentmeta", b =>
                {
                    b.HasOne("Aspian.Domain.AttachmentModel.Attachment", "Attachment")
                        .WithMany("Attachmentmetas")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aspian.Domain.UserModel.User", "CreatedBy")
                        .WithMany("CreatedAttachmentmetas")
                        .HasForeignKey("CreatedById");

                    b.HasOne("Aspian.Domain.UserModel.User", "ModifiedBy")
                        .WithMany("ModifiedAttachmentmetas")
                        .HasForeignKey("ModifiedById");

                    b.Navigation("Attachment");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Aspian.Domain.CommentModel.Comment", b =>
                {
                    b.HasOne("Aspian.Domain.UserModel.User", "CreatedBy")
                        .WithMany("CreatedComments")
                        .HasForeignKey("CreatedById");

                    b.HasOne("Aspian.Domain.UserModel.User", "ModifiedBy")
                        .WithMany("ModifiedComments")
                        .HasForeignKey("ModifiedById");

                    b.HasOne("Aspian.Domain.CommentModel.Comment", "Parent")
                        .WithMany("Replies")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Aspian.Domain.PostModel.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aspian.Domain.SiteModel.Site", "Site")
                        .WithMany("Comments")
                        .HasForeignKey("SiteId")
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Parent");

                    b.Navigation("Post");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Aspian.Domain.CommentModel.CommentHistory", b =>
                {
                    b.HasOne("Aspian.Domain.CommentModel.Comment", "Comment")
                        .WithMany("CommentHistories")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aspian.Domain.UserModel.User", "CreatedBy")
                        .WithMany("CreatedCommentHistories")
                        .HasForeignKey("CreatedById");

                    b.HasOne("Aspian.Domain.UserModel.User", null)
                        .WithMany("ModifiedCommentHistories")
                        .HasForeignKey("UserId");

                    b.Navigation("Comment");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Aspian.Domain.CommentModel.Commentmeta", b =>
                {
                    b.HasOne("Aspian.Domain.CommentModel.Comment", "Comment")
                        .WithMany("Commentmetas")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aspian.Domain.UserModel.User", "CreatedBy")
                        .WithMany("CreatedCommentmetas")
                        .HasForeignKey("CreatedById");

                    b.HasOne("Aspian.Domain.UserModel.User", "ModifiedBy")
                        .WithMany("ModifiedCommentmetas")
                        .HasForeignKey("ModifiedById");

                    b.Navigation("Comment");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Aspian.Domain.OptionModel.Option", b =>
                {
                    b.HasOne("Aspian.Domain.SiteModel.Site", "Site")
                        .WithMany("Options")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Aspian.Domain.OptionModel.Optionmeta", b =>
                {
                    b.HasOne("Aspian.Domain.UserModel.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("Aspian.Domain.OptionModel.Option", "Option")
                        .WithMany("Optionmetas")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModifiedBy");

                    b.Navigation("Option");
                });

            modelBuilder.Entity("Aspian.Domain.PostModel.Post", b =>
                {
                    b.HasOne("Aspian.Domain.UserModel.User", "CreatedBy")
                        .WithMany("CreatedPosts")
                        .HasForeignKey("CreatedById");

                    b.HasOne("Aspian.Domain.UserModel.User", "ModifiedBy")
                        .WithMany("ModifiedPosts")
                        .HasForeignKey("ModifiedById");

                    b.HasOne("Aspian.Domain.PostModel.Post", "Parent")
                        .WithMany("ChildPosts")
                        .HasForeignKey("ParentId");

                    b.HasOne("Aspian.Domain.SiteModel.Site", "Site")
                        .WithMany("Posts")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Parent");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Aspian.Domain.PostModel.PostAttachment", b =>
                {
                    b.HasOne("Aspian.Domain.AttachmentModel.Attachment", "Attachment")
                        .WithMany("PostAttachments")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Aspian.Domain.UserModel.User", "CreatedBy")
                        .WithMany("CreatedPostAttachments")
                        .HasForeignKey("CreatedById");

                    b.HasOne("Aspian.Domain.UserModel.User", "ModifiedBy")
                        .WithMany("ModifiedPostAttachments")
                        .HasForeignKey("ModifiedById");

                    b.HasOne("Aspian.Domain.PostModel.Post", "Post")
                        .WithMany("PostAttachments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Aspian.Domain.PostModel.Postmeta", b =>
                {
                    b.HasOne("Aspian.Domain.UserModel.User", "CreatedBy")
                        .WithMany("CreatedPostmetas")
                        .HasForeignKey("CreatedById");

                    b.HasOne("Aspian.Domain.UserModel.User", "ModifiedBy")
                        .WithMany("ModifiedPostmetas")
                        .HasForeignKey("ModifiedById");

                    b.HasOne("Aspian.Domain.PostModel.Post", "Post")
                        .WithMany("Postmetas")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Aspian.Domain.SiteModel.Site", b =>
                {
                    b.HasOne("Aspian.Domain.UserModel.User", "ModifiedBy")
                        .WithMany("ModifiedSites")
                        .HasForeignKey("ModifiedById");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Aspian.Domain.TaxonomyModel.Taxonomy", b =>
                {
                    b.HasOne("Aspian.Domain.UserModel.User", "CreatedBy")
                        .WithMany("CreatedTaxonomies")
                        .HasForeignKey("CreatedById");

                    b.HasOne("Aspian.Domain.UserModel.User", "ModifiedBy")
                        .WithMany("ModifiedTaxonomies")
                        .HasForeignKey("ModifiedById");

                    b.HasOne("Aspian.Domain.TaxonomyModel.Taxonomy", "Parent")
                        .WithMany("ChildTaxonomies")
                        .HasForeignKey("ParentId");

                    b.HasOne("Aspian.Domain.SiteModel.Site", "Site")
                        .WithMany("Taxonomies")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Parent");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Aspian.Domain.TaxonomyModel.TaxonomyPost", b =>
                {
                    b.HasOne("Aspian.Domain.UserModel.User", "CreatedBy")
                        .WithMany("CreatedTaxonomyPosts")
                        .HasForeignKey("CreatedById");

                    b.HasOne("Aspian.Domain.UserModel.User", "ModifiedBy")
                        .WithMany("ModifiedTaxonomyPosts")
                        .HasForeignKey("ModifiedById");

                    b.HasOne("Aspian.Domain.PostModel.Post", "Post")
                        .WithMany("TaxonomyPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Aspian.Domain.TaxonomyModel.Taxonomy", "Taxonomy")
                        .WithMany("TaxonomyPosts")
                        .HasForeignKey("TaxonomyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Post");

                    b.Navigation("Taxonomy");
                });

            modelBuilder.Entity("Aspian.Domain.TaxonomyModel.Term", b =>
                {
                    b.HasOne("Aspian.Domain.UserModel.User", "CreatedBy")
                        .WithMany("CreatedTerms")
                        .HasForeignKey("CreatedById");

                    b.HasOne("Aspian.Domain.UserModel.User", "ModifiedBy")
                        .WithMany("ModifiedTerms")
                        .HasForeignKey("ModifiedById");

                    b.HasOne("Aspian.Domain.TaxonomyModel.Taxonomy", "Taxonomy")
                        .WithOne("Term")
                        .HasForeignKey("Aspian.Domain.TaxonomyModel.Term", "TaxonomyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Taxonomy");
                });

            modelBuilder.Entity("Aspian.Domain.TaxonomyModel.Termmeta", b =>
                {
                    b.HasOne("Aspian.Domain.UserModel.User", "CreatedBy")
                        .WithMany("CreatedTermmetas")
                        .HasForeignKey("CreatedById");

                    b.HasOne("Aspian.Domain.UserModel.User", "ModifiedBy")
                        .WithMany("ModifiedTermmetas")
                        .HasForeignKey("ModifiedById");

                    b.HasOne("Aspian.Domain.TaxonomyModel.Term", "Term")
                        .WithMany("Termmetas")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("Aspian.Domain.UserModel.User", b =>
                {
                    b.HasOne("Aspian.Domain.UserModel.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Aspian.Domain.UserModel.UserToken", b =>
                {
                    b.HasOne("Aspian.Domain.UserModel.User", "CreatedBy")
                        .WithMany("Tokens")
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Aspian.Domain.UserModel.Usermeta", b =>
                {
                    b.HasOne("Aspian.Domain.UserModel.User", "CreatedBy")
                        .WithMany("CreatedUsermetas")
                        .HasForeignKey("CreatedById");

                    b.HasOne("Aspian.Domain.UserModel.User", "ModifiedBy")
                        .WithMany("ModifiedUsermetas")
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Aspian.Domain.UserModel.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Aspian.Domain.UserModel.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aspian.Domain.UserModel.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Aspian.Domain.UserModel.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aspian.Domain.AttachmentModel.Attachment", b =>
                {
                    b.Navigation("Attachmentmetas");

                    b.Navigation("PostAttachments");
                });

            modelBuilder.Entity("Aspian.Domain.CommentModel.Comment", b =>
                {
                    b.Navigation("CommentHistories");

                    b.Navigation("Commentmetas");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Aspian.Domain.OptionModel.Option", b =>
                {
                    b.Navigation("Optionmetas");
                });

            modelBuilder.Entity("Aspian.Domain.PostModel.Post", b =>
                {
                    b.Navigation("ChildPosts");

                    b.Navigation("Comments");

                    b.Navigation("PostAttachments");

                    b.Navigation("Postmetas");

                    b.Navigation("TaxonomyPosts");
                });

            modelBuilder.Entity("Aspian.Domain.SiteModel.Site", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Attachments");

                    b.Navigation("Comments");

                    b.Navigation("Options");

                    b.Navigation("Posts");

                    b.Navigation("Taxonomies");
                });

            modelBuilder.Entity("Aspian.Domain.TaxonomyModel.Taxonomy", b =>
                {
                    b.Navigation("ChildTaxonomies");

                    b.Navigation("TaxonomyPosts");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("Aspian.Domain.TaxonomyModel.Term", b =>
                {
                    b.Navigation("Termmetas");
                });

            modelBuilder.Entity("Aspian.Domain.UserModel.User", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("CreatedAttachmentmetas");

                    b.Navigation("CreatedAttachments");

                    b.Navigation("CreatedCommentHistories");

                    b.Navigation("CreatedCommentmetas");

                    b.Navigation("CreatedComments");

                    b.Navigation("CreatedPostAttachments");

                    b.Navigation("CreatedPostmetas");

                    b.Navigation("CreatedPosts");

                    b.Navigation("CreatedTaxonomies");

                    b.Navigation("CreatedTaxonomyPosts");

                    b.Navigation("CreatedTermmetas");

                    b.Navigation("CreatedTerms");

                    b.Navigation("CreatedUsermetas");

                    b.Navigation("ModifiedAttachmentmetas");

                    b.Navigation("ModifiedAttachments");

                    b.Navigation("ModifiedCommentHistories");

                    b.Navigation("ModifiedCommentmetas");

                    b.Navigation("ModifiedComments");

                    b.Navigation("ModifiedPostAttachments");

                    b.Navigation("ModifiedPostmetas");

                    b.Navigation("ModifiedPosts");

                    b.Navigation("ModifiedSites");

                    b.Navigation("ModifiedTaxonomies");

                    b.Navigation("ModifiedTaxonomyPosts");

                    b.Navigation("ModifiedTermmetas");

                    b.Navigation("ModifiedTerms");

                    b.Navigation("ModifiedUsermetas");

                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
